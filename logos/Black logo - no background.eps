%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 619
%%HiResBoundingBox: 0 0 2370 618.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 618.95996 re
W
q
[0.24 0 0 -0.24 0 618.95996] cm
q
0 0 9875 2578.125 re
W*
q
[22.436214 0 0 22.42741 242.32938 368.04852] cm
24.882999 87.375 m
23.613998 82.639 l
32.260998 80.322998 l
34.150997 87.375999 l
38.635998 87.375999 l
38.463997 86.734001 l
78.355995 76.044998 l
81.391998 87.375999 l
85.875999 87.375999 l
84.110001 80.779999 l
92.757004 78.463997 l
95.146004 87.375 l
99.630005 87.375 l
79.600006 12.625 l
75.116005 12.625 l
76.164001 16.535 l
67.515999 18.851999 l
65.848 12.624999 l
61.363998 12.624999 l
61.911999 14.671999 l
22.018999 25.361 l
18.606998 12.625 l
14.122998 12.625 l
15.667998 18.393 l
7.020998 20.709999 l
4.853998 12.626 l
0.369 12.626 l
20.397999 87.375999 l
24.882999 87.375999 l
24.882999 87.375 l
h
22.268999 77.617996 m
19.801998 68.411995 l
28.449997 66.095993 l
30.915997 75.300995 l
22.268999 77.617996 l
h
91.412003 73.443001 m
82.766006 75.759003 l
80.298004 66.553001 l
88.946007 64.235001 l
91.412003 73.443001 l
h
87.600998 59.216999 m
78.953995 61.532997 l
76.486992 52.325996 l
85.133995 50.009995 l
87.600998 59.216999 l
h
83.788002 44.988998 m
75.141998 47.306 l
72.674004 38.099998 l
81.322006 35.782997 l
83.788002 44.988998 l
h
77.510002 21.555 m
79.976006 30.761002 l
71.329002 33.078003 l
68.862 23.872002 l
77.510002 21.555 l
h
64.901001 25.830999 m
75.365997 64.886002 l
35.473999 75.572998 l
25.009001 36.52 l
64.901001 25.830999 l
h
8.366 25.731001 m
17.013 23.414001 l
19.48 32.620003 l
10.832 34.937004 l
8.366 25.731001 l
h
12.177 39.958 m
20.825001 37.640999 l
23.292 46.848 l
14.644999 49.165001 l
12.177 39.958 l
h
15.99 54.186001 m
24.637001 51.868 l
27.104 61.075001 l
18.456001 63.390999 l
15.99 54.186001 l
h
f
Q
q
[73.478004 0 0 73.449165 2948.1814 643.40588] cm
3.74 5.84 m
3.74 20 l
1.82 20 l
1.82 5.84 l
3.74 5.84 l
h
11.88 10.28 m
12.9467 10.28 13.7833 10.599999 14.39 11.24 c
14.9967 11.88 15.306661 12.74 15.320001 13.82 c
15.320001 20 l
13.520001 20 l
13.520001 14.34 l
13.520001 13.60666 13.330001 13.0267 12.950001 12.6 c
12.570001 12.173301 12.040001 11.96 11.360001 11.96 c
10.520001 11.96 9.870001 12.24 9.410001 12.8 c
8.950001 13.360001 8.720001 14.1067 8.720001 15.04 c
8.720001 20 l
6.920001 20 l
6.920001 10.520001 l
8.720001 10.520001 l
8.720001 11.980001 l
8.760001 11.980001 l
9.013341 11.446661 9.423341 11.030001 9.990002 10.730001 c
10.556663 10.43 11.186702 10.280001 11.880002 10.280001 c
11.88 10.28 l
h
21.24 10.28 m
21.959999 10.28 22.6033 10.41338 23.17 10.680039 c
23.7367 10.946699 24.1733 11.33336 24.48 11.840039 c
23.08 12.90004 l
22.546659 12.273379 21.9 11.960039 21.139999 11.960039 c
20.686659 11.960039 20.309999 12.06004 20.01 12.260039 c
19.710001 12.460039 19.559999 12.713379 19.559999 13.02004 c
19.559999 13.6867 20.18 14.140039 21.42 14.380039 c
22.633301 14.606699 23.49 14.94004 23.99 15.380039 c
24.49 15.820039 24.74 16.446739 24.74 17.260038 c
24.74 18.180038 24.389999 18.903339 23.690001 19.430038 c
22.990002 19.956738 22.053301 20.226698 20.880001 20.240038 c
20.000002 20.240038 19.276701 20.103378 18.710001 19.830038 c
18.143301 19.556698 17.653301 19.133358 17.240002 18.560038 c
18.600002 17.440037 l
19.320002 18.186697 20.086702 18.560038 20.900002 18.560038 c
21.433342 18.560038 21.886681 18.453377 22.260002 18.240038 c
22.633324 18.026699 22.820002 17.733358 22.820002 17.360018 c
22.820002 16.706678 22.220001 16.253319 21.020002 16.000017 c
19.686703 15.733357 18.790003 15.376698 18.330002 14.930018 c
17.870001 14.483337 17.640001 13.906717 17.640001 13.200018 c
17.640001 12.320018 17.980001 11.616718 18.660002 11.090018 c
19.340002 10.563318 20.200001 10.293358 21.240002 10.280018 c
21.24 10.28 l
h
28.719999 10.520001 m
28.719999 16.200001 l
28.719999 16.946661 28.916658 17.526701 29.309999 17.940001 c
29.703341 18.3533 30.226679 18.560001 30.879999 18.560001 c
31.719999 18.560001 32.369999 18.28334 32.829998 17.730001 c
33.289997 17.176662 33.519997 16.426701 33.519997 15.480001 c
33.519997 10.520001 l
35.319996 10.520001 l
35.319996 20 l
33.519997 20 l
33.519997 18.540001 l
33.479996 18.540001 l
33.226654 19.073341 32.813316 19.490002 32.239994 19.790001 c
31.666672 20.09 31.039993 20.240002 30.359995 20.240002 c
29.306694 20.240002 28.469995 19.913342 27.849995 19.260002 c
27.229994 18.606663 26.919994 17.753302 26.919994 16.700003 c
26.919994 10.520002 l
28.719994 10.520002 l
28.719999 10.520001 l
h
39.98 4.88 m
39.98 20 l
38.18 20 l
38.18 4.88 l
39.98 4.88 l
h
46.639999 10.28 m
47.84 10.28 48.790001 10.55328 49.489998 11.099939 c
50.189995 11.646599 50.559998 12.406639 50.599998 13.379939 c
50.599998 18.459938 l
50.599998 18.939938 50.626659 19.453278 50.68 19.999939 c
49.080002 19.999939 l
49.040001 19.573278 49.02 19.093279 49.02 18.559938 c
48.98 18.559938 l
48.566658 19.173279 48.09 19.606638 47.549999 19.859938 c
47.009998 20.113237 46.379997 20.239937 45.66 20.239937 c
44.686661 20.239937 43.896698 19.979937 43.290001 19.459936 c
42.683304 18.939936 42.380001 18.253237 42.380001 17.399937 c
42.380001 16.319937 42.83334 15.503237 43.740002 14.949937 c
44.646664 14.396637 45.926601 14.119937 47.580002 14.119937 c
48.920002 14.119937 l
48.920002 13.779937 l
48.920002 13.139936 48.710003 12.636637 48.290001 12.269937 c
47.869999 11.903236 47.32 11.719936 46.639999 11.719936 c
46.133339 11.719936 45.689999 11.796597 45.309998 11.949936 c
44.929996 12.103275 44.479996 12.386616 43.959999 12.799956 c
42.879997 11.679956 l
43.906696 10.773296 45.159996 10.306657 46.639996 10.279957 c
46.639999 10.28 l
h
44.18 17.26 m
44.18 18.286701 44.86002 18.799999 46.220001 18.799999 c
47.03334 18.799999 47.6833 18.55666 48.170002 18.07 c
48.656704 17.58334 48.906662 16.879999 48.920002 15.96 c
48.920002 15.440001 l
47.900002 15.440001 l
46.7267 15.440001 45.8134 15.59 45.16 15.89 c
44.506599 16.190001 44.18 16.64666 44.18 17.26 c
h
57.900002 10.28 m
58.233341 10.28 58.5 10.32 58.700001 10.4 c
58.619999 12.34 l
58.273338 12.24666 57.973339 12.2 57.719997 12.2 c
55.946697 12.2 55.046597 13.18666 55.019997 15.16 c
55.019997 20 l
53.219997 20 l
53.219997 10.520001 l
55.019997 10.520001 l
55.019997 11.980001 l
55.059998 11.980001 l
55.299999 11.473341 55.686657 11.06334 56.219997 10.75 c
56.753338 10.43666 57.313297 10.28 57.899998 10.28 c
57.900002 10.28 l
h
61.66 5.8 m
62.02 5.8 62.330021 5.93002 62.590019 6.19002 c
62.850018 6.45002 62.980019 6.76002 62.980019 7.12002 c
62.980019 7.49336 62.84668 7.8067 62.580017 8.06004 c
62.313354 8.313379 62.006699 8.44004 61.660038 8.44004 c
61.286697 8.44004 60.973358 8.313379 60.720016 8.06004 c
60.466675 7.8067 60.340015 7.49336 60.340015 7.120019 c
60.340015 6.746679 60.473354 6.43334 60.740017 6.179999 c
61.00668 5.926659 61.313335 5.799999 61.659996 5.799999 c
61.66 5.8 l
h
62.560001 10.520001 m
62.560001 20 l
60.760002 20 l
60.760002 10.520001 l
62.560001 10.520001 l
h
67.220001 10.520001 m
67.220001 16.200001 l
67.220001 16.946661 67.416664 17.526701 67.809998 17.940001 c
68.203331 18.3533 68.726677 18.560001 69.379997 18.560001 c
70.219994 18.560001 70.869995 18.28334 71.329994 17.730001 c
71.789993 17.176662 72.019997 16.426701 72.019997 15.480001 c
72.019997 10.520001 l
73.82 10.520001 l
73.82 20 l
72.019997 20 l
72.019997 18.540001 l
71.979996 18.540001 l
71.726654 19.073341 71.313316 19.490002 70.739998 19.790001 c
70.166679 20.09 69.540001 20.240002 68.860001 20.240002 c
67.806702 20.240002 66.970001 19.913342 66.349998 19.260002 c
65.729996 18.606663 65.419998 17.753302 65.419998 16.700003 c
65.419998 10.520002 l
67.220001 10.520002 l
67.220001 10.520001 l
h
81.300003 10.28 m
82.673302 10.28 83.660004 10.86666 84.260002 12.04 c
84.566666 11.48 84.986664 11.04666 85.520004 10.74 c
86.053345 10.43334 86.633301 10.28 87.260002 10.28 c
89.646599 10.28 90.846603 11.653299 90.860001 14.4 c
90.860001 20 l
89.059998 20 l
89.059998 14.62 l
89.059998 13.68666 88.893341 13.01 88.559998 12.59 c
88.226654 12.17 87.713318 11.96 87.019997 11.96 c
86.206657 11.96 85.599998 12.20666 85.199997 12.7 c
84.799995 13.193339 84.599998 13.8733 84.599998 14.74 c
84.599998 20 l
82.799995 20 l
82.799995 14.9 l
82.799995 13.78 82.639992 13.009999 82.319992 12.59 c
81.999992 12.170001 81.493332 11.96 80.799995 11.96 c
80.053337 11.96 79.456696 12.24666 79.009995 12.82 c
78.563293 13.393339 78.339996 14.12 78.339996 15 c
78.339996 20 l
76.539993 20 l
76.539993 10.520001 l
78.219994 10.520001 l
78.219994 12 l
78.259995 12 l
78.459991 11.533341 78.856651 11.13 79.449997 10.79 c
80.043343 10.45 80.659996 10.28 81.299995 10.28 c
81.300003 10.28 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
